/*
 * @lc app=leetcode.cn id=1346 lang=java
 *
 * [1346] 检查整数及其两倍数是否存在
 */

// @lc code=start

class Solution {
    public boolean checkIfExist(int[] arr) {
        // 原题数据范围比较小,在[-1000,1000]之间
        // 可以用一个数组记录每个数字存在的次数, 
        // 然后查找是否存在一个相对小的数字, 同时存在它的两倍的数字
        // 用小数字来查找它的两倍,而不是查找大数字的1/2是为了避免不能整除的情况
        // 要明确小数字是为了避免对大数字乘以 2 以后超出数组范围
        // 所以可以看出小数字应当是绝对值小于等于 500 的,这样可以保证大数字绝对值在 1000 以内
        // 记录出现次数而不是仅仅记录是否出现过,是为了处理 0 的情况
        // 如果数字是 0, 那么就需要出现至少两个 0

        // 总共 2001 个数字
        int[] cnt = new int[2001];
        for (int n : arr) {
            cnt[n + 1000]++;
        }

        for (int n : arr) {
            // 如果是 0 则要求出现次数至少为 2
            if (n == 0) {
                if (cnt[1000] >= 2) {
                    return true;
                }
            } else {
                // 其他数字,则处理较小的那个
                // 也就是绝对值 500 以内的, 避免超出数组范围
                if (Math.abs(n) <= 500 && cnt[n * 2 + 1000] != 0) {
                    return true;
                }
            }
        }
        return false;
    }
}
// @lc code=end

