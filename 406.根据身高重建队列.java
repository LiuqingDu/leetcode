/*
 * @lc app=leetcode.cn id=406 lang=java
 *
 * [406] 根据身高重建队列
 */

// @lc code=start
class Solution {
    public int[][] reconstructQueue(int[][] people) {
        // （套路）：一般这种数对，还涉及排序的，根据第一个元素正向排序，根据第二个元素反向排序，
        // 或者根据第一个元素反向排序，根据第二个元素正向排序，往往能够简化解题过程。
        // 比如对题目 [[7,0], [4,4], [7,1], [5,0], [6,1], [5,2]] 排序
        // [7,0], [7,1], [6,1], [5,0], [5,2], [4,4]
        // 排序后每个元素前面的元素数量就是大于等于自己的数量，那么此时如果把右边的元素往左移动
        // 并不会影响原先在左边的那些元素的属性2，也就是不会影响大于等于它们的数量
        // 此时正好是属性 2 还需要继续排序的，对于属性 2 的排序此时也只需要往前移动而不需要往后移动
        // 那么正好移动的时候不会影响其他元素
        // 只需要根据属性 2 将元素放到对应位置即可，
        // 也就是如果前面的数量小于等于当前元素的属性 2，那么当前元素直接排在队伍后
        // 如果队伍前面数量大于当前元素属性 2，那么当前元素插在属性 2 的位置

        // 按照属性 1 降序，属性 2 升序排列
        Arrays.sort(people, (p1, p2) -> {
            if (p1[0] != p2[0]) {
                return p2[0] - p1[0];
            } else {
                return p1[1] - p2[1];
            }
        });

        List<int[]> list = new LinkedList<>();
        for (int i = 0; i < people.length; i++) {
            // 如果队伍前面的元素数量大于当前元素属性 2，则插入到对应位置
            if (list.size() > people[i][1]) {
                list.add(people[i][1], people[i]);
            } else {
                list.add(people[i]);
            }
        }

        return list.toArray(new int[list.size()][]);

    }
}
// @lc code=end

