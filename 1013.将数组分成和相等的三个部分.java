/*
 * @lc app=leetcode.cn id=1013 lang=java
 *
 * [1013] 将数组分成和相等的三个部分
 */

// @lc code=start
class Solution {
    public boolean canThreePartsEqualSum(int[] arr) {
        // 简单的方法是先算总和,再算 1/3 总和也就是目标值
        // 然后从左边开始先找出第一段和为目标的区域,然后继续找第二段区域
        // 能找到两个区域且第三个区域长度不为 0 即可
        // 注意要检查第三个区域长度, 比如 [0,1,-1] 虽然可以找到两段区域,但第三段区域不存在
        // 可以通过遍历到倒数第二个元素为止,来确保第三个区间存在
        // 如果直到倒数第二个元素还没有满足第二区间,则题目不满足
        
        // 另一个方法是计算每个数字的前缀和,然后直接找前缀和等于一倍,两倍,三倍目标的地方
        // 这样是省略了重复累加,不需要在计算总和 sum 和找区域的时候两次都在累加和
        
        int n = arr.length;
        for (int i = 1; i < n; i++) {
            arr[i] += arr[i - 1];
        }
        if (arr[n - 1] % 3 != 0) {
            return false;
        }
        int sum = arr[n - 1] / 3;
        int times = 1;
        // 依次寻找一倍和,两倍和
        // 这里不找三倍和, 而是在倒数第二个元素截止,来寻找两个区间
        // 如果倒数第二个元素之前存在两个区间,则第三个区间自然存在
        // 注意下面的 i < n-1 是到倒数第二个元素
        for (int i = 0; i < n - 1 && times < 3; i++) {
            // 如果找到当前倍数的,则倍数增加,尝试找下一个倍数的
            if (arr[i] == sum * times) {
                times++;
            }
        }
        // 倍数为 3 表示已经成功找到前两个区间,因为这里确保了第三个区间必然存在
        return times == 3;
    }
}
// @lc code=end

