/*
 * @lc app=leetcode.cn id=476 lang=java
 *
 * [476] 数字的补数
 */

// @lc code=start
class Solution {
    public int findComplement(int num) {
        // 注意前导零会被忽略，
        // 所以实际上是要找到num左边第一个1，然后把它右边的部分取反（0变1，1变0）
        // num左边第一个1这一位，最终也变为0，所以找到这一位以后，只需要处理它右边的数字就行
        // 初始化结果为0，然后把这一位右边的部分，原数字是0的，结果的这一位就取1，其余保持为0（相当于原数字1变为0）

        // 找到第一位1在哪里
        int s = -1;
        for (int i = 31; i >= 0; i--) {
            // 从num的左边取出每一位，直到遇到1为止
            // 按位与1，就是把最右一位取出，左边的位跟0与得0，相当于abcd跟0001与运算
            if (((num >> i) & 1) == 1) {
                s = i;
                break;
            }
        }
        // 初始化结果为0，然后把原数字是0的位都标记为1，相当于取反，注意s以及它左边的不用处理
        // s位应当取反为0，所以不用处理，左边是忽略的前导零，不处理
        int res = 0;
        for (int i = 0; i < s; i++) {
            // 找到原数字是0的
            if (((num >> i) & 1) == 0) {
                // 这一位变为1
                res |= (1 << i);
            }
        }
        return res;

    }
}
// @lc code=end

