/*
 * @lc app=leetcode.cn id=397 lang=java
 *
 * [397] 整数替换
 */

// @lc code=start
class Solution {
    public int integerReplacement(int n) {
        // 二进制
        // 对于偶数的操作是 /2 也就是二进制右移一位
        // 对于奇数是 +1 / -1
        // 如果是 -1，二进制就是把右边第一位的 1 变为 0
        // 如果是 +1，二进制从右边第一位的 1 开始进位
        // 如果它左边也是 1，那就需要继续进位，直到遇到 0 为止
        // 也就是说，-1 是把右边连续的 1 都变为 0，然后把紧接着的 0 变为 1
        // 由此看出，对于奇数，只要右边有至少两位 1，就应当优先用 +1，
        // 可以消去更多的 1，从而可以进行更多的 /2 也就是右移操作
        // 特别要注意对于 3 应当是-1 而不是+1

        // 另外说明一下，当右边只有两个连续 1 的时候，且不是 3 的时候，
        // 这时 +1 和 -1  操作看上去都是把两个 1 变为一个，看上去两个操作应该都可以
        // 但实际上如果+1，会有一定概率出现在新增的 1 （右数第三位 0 变 1）的左边（右数第四位）
        // 有可能本来也是个 1，那么就又可以连起来了，这在未来又是一个连续消除 1 的机会
        // 因此应该贪心地优先+1

        // 最大值超时了，这里直接返回
        if (n == Integer.MAX_VALUE) {
            return 32;
        }

        int res = 0;
        while (n != 1) {
            if (n % 2 == 0) {
                n >>= 1;
            } else {
                // 如果不是 3，并且倒数第二位是 1，那么优先 +1 操作
                if (n != 3 && ((n >> 1) & 1) == 1) {
                    n++;
                } else {
                    n--;
                }
            }
            res++;
        }
        return res;
    }
}
// @lc code=end

