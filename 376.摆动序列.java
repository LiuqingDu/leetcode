/*
 * @lc app=leetcode.cn id=376 lang=java
 *
 * [376] 摆动序列
 */

// @lc code=start
class Solution {
    public int wiggleMaxLength(int[] nums) {
        // dp
        // 记dp[i][0]表示前 i 个数字，且最后一段是上升的序列长度，且
        // 记dp[i][1]表示前 i 个数字，且最后一段是下降的序列长度
        // 可以看出，如果当前数字比前一个数字大，那么在这一段是上升的，
        // 此时最后一段是上升的序列长度就等于之前下降的序列长度基础上再+1
        // 而下降的序列长度保持不变
        // 反之也一样
        // 核心在于，要形成一个以上升为结尾的序列，它是在一个下降为结尾的序列基础上，出现了一个比下降的末尾要大的数字
        // 反之同理
        // 这里对于下降序列，需要尽量选择最末尾的数字，比如1,5,4,3,2这样的，它的末尾是下降的序列应当为1,5,2
        // 这样上升或下降的子序列，它们两个之一的最后一个数字就是原序列的前一个数字，用来跟当前数字比较
        // 同样还是这个序列1,5,4,3,2，它的上升序列是1,5，下降是1,5,2，一旦末尾出现了比 2 大的数字比如 6
        // 那么就是形成了一个新的上升，这个上升会在原先的下降的基础上，长度+1，变成新的上升序列的长度，而下降序列依然不变
        // 新的上升：1,5,2,6，新的下降：1,5,2

        // int n = nums.length;
        // int[][] dp = new int[n][2];
        // dp[0][0] = 1;
        // dp[0][1] = 1;

        // for (int i = 1; i < n; i++) {
        //     // 如果是上升，那么新的上升长度取决于之前的下降长度
        //     if (nums[i] > nums[i - 1]) {
        //         dp[i][0] = dp[i - 1][1] + 1;
        //         dp[i][1] = dp[i - 1][1];
        //     } else if (nums[i] < nums[i - 1]) {
        //         dp[i][0] = dp[i - 1][0];
        //         dp[i][1] = dp[i - 1][0] + 1;
        //     } else {
        //         dp[i][0] = dp[i - 1][0];
        //         dp[i][1] = dp[i - 1][1];
        //     }
        // }

        // return n == 0 ? 0 : Math.max(dp[n - 1][0], dp[n - 1][1]);

        // 注意到新状态仅仅取决于上一个状态，可以简化只记录最后一个状态
        int n = nums.length;
        int up = 1;
        int down = 1;
        for (int i = 1; i < n; i++) {
            if (nums[i] > nums[i - 1]) {
                up = down + 1;
            } else if (nums[i] < nums[i - 1]) {
                down = up + 1;
            }
        }
        
        return n == 0 ? 0 : Math.max(up, down);
    }
}
// @lc code=end

