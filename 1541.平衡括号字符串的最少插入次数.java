/*
 * @lc app=leetcode.cn id=1541 lang=java
 *
 * [1541] 平衡括号字符串的最少插入次数
 */

// @lc code=start
class Solution {
    public int minInsertions(String s) {
        // 与921类似，不同的是一个左括号需要两个右括号
        // 当遇到左括号的时候，需要先判断之前需要的右括号数量是不是奇数个
        // 如果是奇数个，那么在当前这个左括号之前需要补至少一个右括号
        // 使得接下来对右括号的需求量变为偶数，
        // 也就是要使得左括号左边需要有连续的两个右括号而不是一个
        // 因为非连续的右括号不符合要求

        int res = 0;
        int need = 0;

        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == '(') {
                // 如果右括号需求量为奇数，则需要先加一个不可减少的右括号，把左边的单独的右括号补齐
                if (need % 2 == 1) {
                    // 把右括号需求量挪一个到不可减少的需求量去
                    // 需要一个不可减少的右括号
                    res++;
                    // 动态的右括号需求量减一
                    need--;
                }
                // 右括号+2，对应的是当前的左括号
                need = need + 2;
            }
            if (s.charAt(i) == ')') {
                need--;
                // 如果右括号需求量为负数，说明之前左右括号平衡的，这是一个单独的右括号
                // 需求量就变为（左括号需求+1，右括号需要1个）
                if (need == -1) {
                    res++;
                    need = 1;
                }
            }
        }
        return res + need;
    }
}
// @lc code=end

